<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flutter快速学习笔记</title>
      <link href="/2020/03/26/flutter-kuai-su-xue-xi-bi-ji/"/>
      <url>/2020/03/26/flutter-kuai-su-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="路由和路由管理"><a href="#路由和路由管理" class="headerlink" title="路由和路由管理"></a>路由和路由管理</h2><p>一个Route对应一个page，可以将Route简单理解成一个page。路由管理维护一个路由栈，管理页面之间的跳转逻辑，有push和pop等操作。</p><h4 id="MaterialPageRoute"><a href="#MaterialPageRoute" class="headerlink" title="MaterialPageRoute"></a>MaterialPageRoute</h4><p>用来构建一个Page对应的Route。</p><pre class="line-numbers language-dart"><code class="language-dart"><span class="token function">MaterialPageRoute</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    WidgetBuilder builder<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 构建Widget的函数</span>    RouteSettings settings<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 保存路由的信息和携带的参数等</span>    bool maintainState <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 当路由不在栈顶时，是否依然保存state数据</span>    bool fullscreenDialog <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 路由是否是全屏弹窗，如果是，将会从屏幕底部向上入栈</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h4><p>路由管理类，主要提供入栈和出栈相关操作</p><pre class="line-numbers language-dart"><code class="language-dart">Future <span class="token function">push</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">,</span> Route route<span class="token punctuation">)</span>bool <span class="token function">pop</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">,</span> <span class="token punctuation">[</span> result <span class="token punctuation">]</span><span class="token punctuation">)</span>Navigator<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">,</span> Route route<span class="token punctuation">)</span>Navigator<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Route route<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h4><p>给Route定义一个名称，通过一个Map来管理名称对应的Route，这个Map叫做路由表。</p><pre class="line-numbers language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// 注意：Map的key是Route的名称，value是Router的Builder函数，而不是路由本身。</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> WidgetBuilder<span class="token operator">></span> routes<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注册路由表是在<code>MaterialApp</code>中注册，根路由的注册也是在<code>MaterialApp</code>中配置</p><h4 id="路由传值"><a href="#路由传值" class="headerlink" title="路由传值"></a>路由传值</h4><ul><li>构建Route对应Widget的时候传值</li><li>push函数传值</li></ul><pre class="line-numbers language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// 方式一：</span>Future <span class="token function">pushNamed</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">,</span> String routeName<span class="token punctuation">,</span><span class="token punctuation">{</span>Object arguments<span class="token punctuation">}</span><span class="token punctuation">)</span>Navigator<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pushNamed</span><span class="token punctuation">(</span><span class="token string">"new_page"</span><span class="token punctuation">,</span> arguments<span class="token punctuation">:</span> <span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方式二：</span>routes<span class="token punctuation">:</span><span class="token punctuation">{</span>   <span class="token string">"new_page"</span><span class="token punctuation">:</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">NewRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token string">"/"</span><span class="token punctuation">:</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">MyHomePage</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string">'Flutter Demo Home Page'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//注册首页路由</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通过ModalRoute对象获取push传值</li></ul><pre class="line-numbers language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">//获取路由参数  </span> <span class="token keyword">var</span> args <span class="token operator">=</span> ModalRoute<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>settings<span class="token punctuation">.</span>arguments<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="生成路由的钩子"><a href="#生成路由的钩子" class="headerlink" title="生成路由的钩子"></a><strong>生成路由的钩子</strong></h4><p>如果push一个未注册的命名路由，如登陆页对应的Route，那么钩子函数<code>onGenerateRoute</code>会被调用，<code>onGenerateRoute</code>在<code>MaterialApp</code>中配置。我们可以在这个钩子函数中处理相关处理逻辑，然后构建登录页对应的Route并返回。</p><pre class="line-numbers language-dart"><code class="language-dart">onGenerateRoute<span class="token punctuation">:</span><span class="token punctuation">(</span>RouteSettings settings<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">MaterialPageRoute</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>           String routeName <span class="token operator">=</span> settings<span class="token punctuation">.</span>name<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 如果访问的路由页需要登录，但当前未登录，则直接返回登录页路由，</span>       <span class="token comment" spellcheck="true">// 引导用户登录；其它情况则正常打开路由。</span>     <span class="token punctuation">}</span>   <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h2><p>除了需要将资源拖入项目工程中，还需要在<a href="https://www.dartlang.org/tools/pub/pubspec" target="_blank" rel="noopener"><code>pubspec.yaml</code></a>文件中配置<code>assets</code>。</p><ul><li><p>配置assets</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">flutter</span><span class="token punctuation">:</span>  <span class="token key atrule">assets</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> assets/my_icon.png    <span class="token punctuation">-</span> assets/background.png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>加载assets</p><ul><li><p>全局静态的<code>rootBundle</code>对象来加载asset</p></li><li><p>通过 <code>DefaultAssetBundle</code>加载</p><p><code>DefaultAssetBundle</code>是使父级widget在运行时动态替换的不同的AssetBundle，这对于本地化或测试场景很有用.</p></li></ul></li><li><p>加载图片</p><ul><li><p>加载图片数据</p><pre class="line-numbers language-dart"><code class="language-dart"><span class="token function">AssetImage</span><span class="token punctuation">(</span><span class="token string">'graphics/background.png'</span><span class="token punctuation">)</span><span class="token function">AssetImage</span><span class="token punctuation">(</span><span class="token string">'icons/heart.png'</span><span class="token punctuation">,</span> package<span class="token punctuation">:</span> <span class="token string">'my_icons'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>加载图片对应的Widget</p><pre class="line-numbers language-dart"><code class="language-dart">Image<span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span><span class="token string">'graphics/background.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h2 id="基础Widget"><a href="#基础Widget" class="headerlink" title="基础Widget"></a>基础Widget</h2><h4 id="state的生命周期"><a href="#state的生命周期" class="headerlink" title="state的生命周期"></a>state的生命周期</h4><ul><li><p>第一次加载某个StateFullWidget时，state的生命周期</p><p>flutter: initState // 初始化state，仅在第一次加载或者被释放后被加载后初始化时调用<br>flutter: didChangeDependencies // 和当前StateFullWidget相互依赖的StateFullWidget发生变化时被调用<br>flutter: build:</p></li><li><p>然后不做任何改动热重载</p><p>flutter: reassemble   // 热重载和释放时被调用<br>flutter: didUpdateWidget  // 热重载重组后被调用<br>flutter: build:</p></li><li><p>只改变其中Text的字体大小和颜色，再热重载</p><p>flutter: reassemble<br>flutter: didUpdateWidget<br>flutter: build:</p></li><li><p>插入子Widget，再热重载</p><p>flutter: reassemble<br>flutter: didUpdateWidget<br>flutter: build:</p></li><li><p>push新路由</p><p>flutter: deactive //冻结  进入后台状态时被调用<br>flutter: build:</p></li><li><p>pop</p><p>flutter: deactive<br>flutter: build: </p></li><li><p>移除fullStateWidget（把当前被打印的fullStateWidget从父Widget中替换为其他Widget），再热重载</p><p>flutter: reassemble // 重组<br>flutter: deactive  // 停用<br>flutter: dispose // 释放</p></li></ul><h4 id="文本和字体样式"><a href="#文本和字体样式" class="headerlink" title="文本和字体样式"></a>文本和字体样式</h4><ul><li>Text</li><li>TextSpan</li><li>DefaultTextStyle</li><li>字体设置和使用</li></ul><h4 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h4><ul><li><p>RaiseButton</p></li><li><p>FlatButton</p></li><li><p>OutlineButton</p></li><li><p>IconButtob</p></li><li><p>带图标Button</p></li><li><p>自定义Button</p></li></ul><h4 id="图片和Icon"><a href="#图片和Icon" class="headerlink" title="图片和Icon"></a>图片和Icon</h4><ul><li>Image</li><li>Image缓存</li><li>Icon</li><li>自定义字体Icon</li></ul><h4 id="单选和复选框"><a href="#单选和复选框" class="headerlink" title="单选和复选框"></a>单选和复选框</h4><h4 id="输入框和表单"><a href="#输入框和表单" class="headerlink" title="输入框和表单"></a>输入框和表单</h4><ul><li>TextField</li><li>Form</li><li>FormField和FormState</li></ul><h4 id="进度指示器"><a href="#进度指示器" class="headerlink" title="进度指示器"></a>进度指示器</h4><ul><li>Linea rProgressIndicator</li><li>CircularProgressIndicator</li><li>自定义</li></ul><h2 id="布局Widget"><a href="#布局Widget" class="headerlink" title="布局Widget"></a>布局Widget</h2><blockquote><p>布局类Widget一般都需要接收一个widget数组（children），他们直接或间接继承自（或包含）MultiChildRenderObjectWidget </p></blockquote><h4 id="线性布局（Row和Column）"><a href="#线性布局（Row和Column）" class="headerlink" title="线性布局（Row和Column）"></a>线性布局（Row和Column）</h4><ul><li>Row</li></ul><pre class="line-numbers language-dart"><code class="language-dart"><span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 水平方向的排列方向</span>  TextDirection textDirection<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 在主水平方向占用的空间，子组件没有占满剩余空间，则等于所有子组件占用的的水平空间</span>  MainAxisSize mainAxisSize <span class="token operator">=</span> MainAxisSize<span class="token punctuation">.</span>max<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 水平方向的对齐方式，mainAxisSize为min时该属性无效</span>  MainAxisAlignment mainAxisAlignment <span class="token operator">=</span> MainAxisAlignment<span class="token punctuation">.</span>start<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 垂直方向的排列方向</span>  VerticalDirection verticalDirection <span class="token operator">=</span> VerticalDirection<span class="token punctuation">.</span>down<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 垂直方向的对齐方式</span>  CrossAxisAlignment crossAxisAlignment <span class="token operator">=</span> CrossAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 子组件数组</span>  List<span class="token operator">&lt;</span>Widget<span class="token operator">></span> children <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Column</li></ul><p>Column和Row的属性一直，区别在与Column的主轴为纵轴。</p><p>如果Row嵌套Row，或者Column嵌套Column，之后最外层的Column或者Row才有能力占满最大空间。可以使用Expanded强制使内部的Row或者Column沾满最大空间。</p><h4 id="弹性布局（Flex和Expanded）"><a href="#弹性布局（Flex和Expanded）" class="headerlink" title="弹性布局（Flex和Expanded）"></a>弹性布局（Flex和Expanded）</h4><ul><li><p>Flex</p><p>Flex布局允许子组件按着一定比例分配父组件的空间一般和Expanded搭配使用</p><pre class="line-numbers language-dart"><code class="language-dart"><span class="token function">Flex</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token comment" spellcheck="true">//弹性布局主轴的方向, Row默认为水平方向，Column默认为垂直方向</span>  <span class="token metadata symbol">@required</span> <span class="token keyword">this</span><span class="token punctuation">.</span>direction<span class="token punctuation">,</span>   List<span class="token operator">&lt;</span>Widget<span class="token operator">></span> children <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function">Expanded</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 组件的弹性系数，为0或者null表示这个组件没有弹性，大于0时按各个组件的弹性系数比例来分配空间</span>   int flex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>     <span class="token metadata symbol">@required</span> Widget child<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="流式布局（Wrap、Flow）"><a href="#流式布局（Wrap、Flow）" class="headerlink" title="流式布局（Wrap、Flow）"></a>流式布局（Wrap、Flow）</h4><ul><li><p>Wrap</p><p>使用Row、Column、Flex布局的时候，如果子组件超出父组件的范围，会报错，不会自动换行。Wrap和它们几乎相同，但是可以自动换行，还多了几个特有属性</p><pre class="line-numbers language-dart"><code class="language-dart"><span class="token function">Wrap</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>direction <span class="token operator">=</span> Axis<span class="token punctuation">.</span>horizontal<span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>alignment <span class="token operator">=</span> WrapAlignment<span class="token punctuation">.</span>start<span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>spacing <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 主轴方向上Widget间距</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>runAlignment <span class="token operator">=</span> WrapAlignment<span class="token punctuation">.</span>start<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 次轴方向对齐方式</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>runSpacing <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 次轴方向上Widget间距</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>crossAxisAlignment <span class="token operator">=</span> WrapCrossAlignment<span class="token punctuation">.</span>start<span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>textDirection<span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>verticalDirection <span class="token operator">=</span> VerticalDirection<span class="token punctuation">.</span>down<span class="token punctuation">,</span>  List<span class="token operator">&lt;</span>Widget<span class="token operator">></span> children <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Flow可以自定义流式布局，布局性能比较高，但是相对复杂，一般使用Wrap代替</p></li></ul><h4 id="层叠布局（Stack、Positioned）"><a href="#层叠布局（Stack、Positioned）" class="headerlink" title="层叠布局（Stack、Positioned）"></a>层叠布局（Stack、Positioned）</h4><p>Flutter中使用Stack和Positioned来实现绝对定位，和iOS中的frame布局类似。Stack允许子组件重叠，Position确定子组件相对父组件四个边的距离。</p><pre class="line-numbers language-dart"><code class="language-dart"><span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 缺失必要定位的子组件的对齐方式</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>alignment <span class="token operator">=</span> AlignmentDirectional<span class="token punctuation">.</span>topStart<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 子组件的排列方向</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>textDirection<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 缺失定位的子组件如何适应Stack的空间大小，loose为使用子组件本身大小，expand为扩展为Stack的大小</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>fit <span class="token operator">=</span> StackFit<span class="token punctuation">.</span>loose<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 显示超出Stack显示空间的子组件，clip裁剪，visible显示</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>overflow <span class="token operator">=</span> Overflow<span class="token punctuation">.</span>clip<span class="token punctuation">,</span>  List<span class="token operator">&lt;</span>Widget<span class="token operator">></span> children <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token function">Positioned</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  Key key<span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>bottom<span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">,</span>  <span class="token metadata symbol">@required</span> Widget child<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对齐和相对定位（Align，alignment，Center）"><a href="#对齐和相对定位（Align，alignment，Center）" class="headerlink" title="对齐和相对定位（Align，alignment，Center）"></a>对齐和相对定位（Align，alignment，Center）</h4><p>简单的调整<strong>一个</strong>子元素在父元素中的位置可以式用Align</p><pre class="line-numbers language-dart"><code class="language-dart"><span class="token function">Align</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  Key key<span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>alignment <span class="token operator">=</span> Alignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>widthFactor<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 子组件的尺寸缩放因子</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>heightFactor<span class="token punctuation">,</span>  Widget child<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>alignment</p><p>AlignmentGeometry是矩阵，alignment矩阵上的一个点，alignment继承至AlignmentGeometry。<code>Alignment(this.x, this.y)</code></p><p>左上顶点：<code>Alignment(-1, -1)</code>，</p><p>右上顶点：<code>Alignment(1, -1)</code>，</p><p>左下顶点：<code>Alignment(-1, 1)</code>，</p><p>右下顶点：<code>Alignment(1, 1)</code>。</p></li><li><p>FractionalOffset</p><p><code>FractionalOffset</code> 继承自 <code>Alignment</code>，它和 <code>Alignment</code>唯一的区别就是坐标原点不同！<code>FractionalOffset</code> 的坐标原点为矩形的左侧顶点，</p></li><li><p>Center</p><pre class="line-numbers language-dart"><code class="language-dart"><span class="token function">Center</span><span class="token punctuation">(</span>    widthFactor<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    heightFactor<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="容器Widget"><a href="#容器Widget" class="headerlink" title="容器Widget"></a>容器Widget</h2><blockquote><p>而容器类Widget一般只需要接收一个子Widget（child），他们直接或间接继承自（或包含）SingleChildRenderObjectWidget</p></blockquote><h4 id="填充容器（padding、EdgeInsets）"><a href="#填充容器（padding、EdgeInsets）" class="headerlink" title="填充容器（padding、EdgeInsets）"></a>填充容器（padding、EdgeInsets）</h4><pre class="line-numbers language-dart"><code class="language-dart"><span class="token function">Padding</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  EdgeInsetsGeometry padding<span class="token punctuation">,</span>  Widget child<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>EdgeInsets四个常用方法<span class="token number">1</span><span class="token punctuation">.</span> <span class="token function">fromLTRB</span><span class="token punctuation">(</span>double left<span class="token punctuation">,</span> double top<span class="token punctuation">,</span> double right<span class="token punctuation">,</span> double bottom<span class="token punctuation">)</span>：分别指定四个方向的填充。<span class="token number">2</span><span class="token punctuation">.</span> <span class="token function">all</span><span class="token punctuation">(</span>double value<span class="token punctuation">)</span> <span class="token punctuation">:</span> 所有方向均使用相同数值的填充。<span class="token number">3</span><span class="token punctuation">.</span> <span class="token function">only</span><span class="token punctuation">(</span><span class="token punctuation">{</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right <span class="token punctuation">,</span>bottom <span class="token punctuation">}</span><span class="token punctuation">)</span>：可以设置具体某个方向的填充<span class="token punctuation">(</span>可以同时指定多个方向<span class="token punctuation">)</span>。<span class="token number">4</span><span class="token punctuation">.</span> <span class="token function">symmetric</span><span class="token punctuation">(</span><span class="token punctuation">{</span> vertical<span class="token punctuation">,</span> horizontal <span class="token punctuation">}</span><span class="token punctuation">)</span>：用于设置对称方向的填充<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="尺寸限制容器"><a href="#尺寸限制容器" class="headerlink" title="尺寸限制容器"></a>尺寸限制容器</h4><ul><li><p>ConstrainedBox和BoxDecoration</p><p>ConstrainedBox和BoxDecoration搭配使用，给子组件添加额外的约束</p><pre class="line-numbers language-dart"><code class="language-dart"><span class="token function">ConstrainedBox</span><span class="token punctuation">(</span>  constraints<span class="token punctuation">:</span> <span class="token function">BoxConstraints</span><span class="token punctuation">(</span>    minWidth<span class="token punctuation">:</span> double<span class="token punctuation">.</span>infinity<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//宽度尽可能大</span>    minHeight<span class="token punctuation">:</span> <span class="token number">50.0</span> <span class="token comment" spellcheck="true">//最小高度为50像素</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span>  child<span class="token punctuation">:</span> <span class="token function">Container</span><span class="token punctuation">(</span>      height<span class="token punctuation">:</span> <span class="token number">5.0</span><span class="token punctuation">,</span>       child<span class="token punctuation">:</span> redBox   <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span>BoxConstraints<span class="token punctuation">.</span><span class="token function">tight</span><span class="token punctuation">(</span>Size size<span class="token punctuation">)</span>，可以生成给定大小的限制；<span class="token keyword">const</span> BoxConstraints<span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>可以生成一个尽可能大的用以填充另一个容器的BoxConstraints<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果ConstrainedBox有嵌套，出现多重约束，则会把所有约束综合起来去一个同时满足的约束条件</p><p>也可以通过UncontrainedBox来去除父级约束限制</p></li><li><p>UncontrainedBox</p><p>用来去除父级约束限制</p><pre class="line-numbers language-dart"><code class="language-dart"><span class="token function">ConstrainedBox</span><span class="token punctuation">(</span>    constraints<span class="token punctuation">:</span> <span class="token function">BoxConstraints</span><span class="token punctuation">(</span>minWidth<span class="token punctuation">:</span> <span class="token number">60.0</span><span class="token punctuation">,</span> minHeight<span class="token punctuation">:</span> <span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//父</span>    child<span class="token punctuation">:</span> <span class="token function">UnconstrainedBox</span><span class="token punctuation">(</span> <span class="token comment" spellcheck="true">//“去除”父级限制</span>      child<span class="token punctuation">:</span> <span class="token function">ConstrainedBox</span><span class="token punctuation">(</span>        constraints<span class="token punctuation">:</span> <span class="token function">BoxConstraints</span><span class="token punctuation">(</span>minWidth<span class="token punctuation">:</span> <span class="token number">90.0</span><span class="token punctuation">,</span> minHeight<span class="token punctuation">:</span> <span class="token number">20.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//子</span>        child<span class="token punctuation">:</span> redBox<span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>SizedBox</p><p>用来给子组件设置固定的宽、高。ConstrainedBox也可以实现同样的效果，它们的实现原理都是通过创建一个RenderConstrainedBox部件实现的。</p><pre class="line-numbers language-dart"><code class="language-dart"><span class="token function">SizedBox</span><span class="token punctuation">(</span>  width<span class="token punctuation">:</span> <span class="token number">80.0</span><span class="token punctuation">,</span>  height<span class="token punctuation">:</span> <span class="token number">80.0</span><span class="token punctuation">,</span>  child<span class="token punctuation">:</span> redBox<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>其他约束盒子</p><ul><li><code>AspectRatio</code>，它可以指定子组件的长宽比</li><li><code>LimitedBox</code> 用于指定最大宽高</li><li><code>FractionallySizedBox</code> 可以根据父容器宽高的百分比来设置子组件宽高</li></ul></li></ul><h4 id="装饰容器-DecoratedBox、Boxdecoration"><a href="#装饰容器-DecoratedBox、Boxdecoration" class="headerlink" title="装饰容器(DecoratedBox、Boxdecoration)"></a>装饰容器(DecoratedBox、Boxdecoration)</h4><p>在绘制子组件前绘制一些装饰样式，Boxdecoration继承至抽象类Decoration，负责描述装饰样式。</p><pre class="line-numbers language-dart"><code class="language-dart"><span class="token keyword">const</span> <span class="token function">DecoratedBox</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  Decoration decoration<span class="token punctuation">,</span>  DecorationPosition position <span class="token operator">=</span> DecorationPosition<span class="token punctuation">.</span>background<span class="token punctuation">,</span>  Widget child<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">BoxDecoration</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    Color color<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//颜色</span>    DecorationImage image<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//图片</span>    BoxBorder border<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//边框</span>    BorderRadiusGeometry borderRadius<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//圆角</span>    List<span class="token operator">&lt;</span>BoxShadow<span class="token operator">></span> boxShadow<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//阴影,可以指定多个</span>    Gradient gradient<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//渐变</span>    BlendMode backgroundBlendMode<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//背景混合模式</span>    BoxShape shape <span class="token operator">=</span> BoxShape<span class="token punctuation">.</span>rectangle<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//形状</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="变换（Transform）"><a href="#变换（Transform）" class="headerlink" title="变换（Transform）"></a>变换（Transform）</h4><p>Transform在绘制子组件之前，对子组件进行一些矩阵变换</p><pre class="line-numbers language-dart"><code class="language-dart"><span class="token function">Container</span><span class="token punctuation">(</span>  color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>black<span class="token punctuation">,</span>  child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Transform</span><span class="token punctuation">(</span>    alignment<span class="token punctuation">:</span> Alignment<span class="token punctuation">.</span>topRight<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//相对于坐标系原点的对齐方式</span>    transform<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Matrix4<span class="token punctuation">.</span>skewY</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//沿Y轴倾斜0.3弧度</span>    child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>      padding<span class="token punctuation">:</span> <span class="token keyword">const</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>deepOrange<span class="token punctuation">,</span>      child<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Apartment for rent!'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Transform提供一些命名构造方法，快速创建一些常见的变换对象</p><ul><li><p>平移</p><pre class="line-numbers language-dart"><code class="language-dart">Transform<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span>    offset<span class="token punctuation">:</span> <span class="token function">Offset</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>旋转</p><pre class="line-numbers language-dart"><code class="language-dart">Transform<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">//旋转90度</span>    angle<span class="token punctuation">:</span>math<span class="token punctuation">.</span>pi<span class="token operator">/</span><span class="token number">2</span> <span class="token punctuation">,</span>    child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>缩放</p><pre class="line-numbers language-dart"><code class="language-dart">Transform<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span>      scale<span class="token punctuation">:</span> <span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//放大到1.5倍</span>      child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><em>注意：Transform发生在布局之后的绘制阶段，所以Transform的子组件的实际位置和大小并没有变化，只是显示效果发生了变化。</em></p><ul><li><p>RatatedBox</p><p> <code>RotatedBox</code>和<code>Transform.rotate</code>功能相似，它们都可以对子组件进行旋转变换，但是有一点不同：<code>RotatedBox</code>的变换是在layout阶段，会影响在子组件的位置和大小</p></li></ul><h4 id="Container容器"><a href="#Container容器" class="headerlink" title="Container容器"></a>Container容器</h4><p><code>Container</code>是一个组合类容器，它本身不对应具体的<code>RenderObject</code>，它是<code>DecoratedBox</code>、<code>ConstrainedBox、Transform</code>、<code>Padding</code>、<code>Align</code>等组件组合的一个多功能容器，所以我们只需通过一个<code>Container</code>组件可以实现同时需要装饰、变换、限制的场景。</p><pre class="line-numbers language-dart"><code class="language-dart"><span class="token function">Container</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>alignment<span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>padding<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//容器内补白，属于decoration的装饰范围</span>  Color color<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 背景色</span>  Decoration decoration<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 背景装饰</span>  Decoration foregroundDecoration<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//前景装饰</span>  double width<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//容器的宽度</span>  double height<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//容器的高度</span>  BoxConstraints constraints<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//容器大小的限制条件</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>margin<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//容器外补白，不属于decoration的装饰范围</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>transform<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//变换</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>child<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><pre><code> 1.  Container可以设置宽高，如果同时设置了宽高和Constraints，则以设置的宽高为准 2.  color和装饰decoration不能同时设置，否则会报错。因为制定color后，Container内部会自定创建一个decoration。</code></pre><h4 id="框架容器"><a href="#框架容器" class="headerlink" title="框架容器"></a>框架容器</h4><ul><li>Scaffold</li><li>AppBar</li><li>Tabbar和TabbarView</li><li>Drawer</li><li>FloatingActionButton</li><li>BottomNavigaitonBar</li></ul><h4 id="裁剪（Clip）"><a href="#裁剪（Clip）" class="headerlink" title="裁剪（Clip）"></a>裁剪（Clip）</h4><h2 id="滚动Widget"><a href="#滚动Widget" class="headerlink" title="滚动Widget"></a>滚动Widget</h2><h2 id="功能型WIdget"><a href="#功能型WIdget" class="headerlink" title="功能型WIdget"></a>功能型WIdget</h2><h2 id="事件处理和通知"><a href="#事件处理和通知" class="headerlink" title="事件处理和通知"></a>事件处理和通知</h2><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h2 id="文件操作和网络请求"><a href="#文件操作和网络请求" class="headerlink" title="文件操作和网络请求"></a>文件操作和网络请求</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>十大经典排序算法整理汇总（附代码）</title>
      <link href="/2020/02/16/sort-algorithms/"/>
      <url>/2020/02/16/sort-algorithms/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【算法码上来】，每日算法干货马上就来！</p></blockquote><p><img src="/medias/contact.jpg" alt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p><p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p><p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href="https://leetcode-cn.com/problems/sort-an-array/" title="LeetCode 912. 排序数组" target="_blank" rel="noopener">LeetCode 912. 排序数组</a> 这道题。</p><h2 id="性质汇总"><a href="#性质汇总" class="headerlink" title="性质汇总"></a>性质汇总</h2><blockquote><p>如果发现表中有错误，请留言告知。</p></blockquote><table><thead><tr><th>算法</th><th>最好</th><th>最坏</th><th>平均</th><th>空间</th><th align="center">稳定性</th><th align="center">是否基于比较</th></tr></thead><tbody><tr><td>冒泡排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>选择排序</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>插入排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>快速排序</td><td>$O(n\log n)$</td><td>$O(n^2)$</td><td>$O(n\log n)$</td><td>$O(\log n)$~$O(n)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>归并排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>希尔排序</td><td>$O(n^{1.3})$</td><td>$O(n^2)$</td><td>$O(n\log n)$~$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>计数排序</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>基数排序</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>桶排序</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n+m)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>堆排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr></tbody></table><blockquote><p>如果表格显示有问题的话，还可以直接看下面的汇总图：</p></blockquote><p><img src="1.png" alt="十大经典排序算法性质汇总"></p><h3 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h3><p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p><p><strong>冒泡排序</strong><br><a href="https://en.wikipedia.org/wiki/Bubble_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bubble_sort</a></p><p><strong>选择排序</strong><br><a href="https://en.wikipedia.org/wiki/Selection_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Selection_sort</a></p><p><strong>插入排序</strong><br><a href="https://en.wikipedia.org/wiki/Insertion_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Insertion_sort</a></p><p><strong>快速排序</strong><br><a href="https://en.wikipedia.org/wiki/Quicksort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Quicksort</a></p><p><strong>归并排序</strong><br><a href="https://en.wikipedia.org/wiki/Merge_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Merge_sort</a></p><p><strong>希尔排序</strong><br><a href="https://en.wikipedia.org/wiki/Shellsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Shellsort</a></p><p><strong>计数排序</strong><br><a href="https://en.wikipedia.org/wiki/Counting_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Counting_sort</a></p><p><strong>基数排序</strong><br><a href="https://en.wikipedia.org/wiki/Radix_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Radix_sort</a></p><p><strong>桶排序</strong><br><a href="https://en.wikipedia.org/wiki/Bucket_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bucket_sort</a></p><p><strong>堆排序</strong><br><a href="https://en.wikipedia.org/wiki/Heapsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Heapsort</a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p><p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 冒泡排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token number">-2</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 选择排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">selectSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    idx <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 插入排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">insertSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 快速排序（24 ms）</span>    <span class="token keyword">void</span> <span class="token function">qSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">quickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序（192 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> rnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rnums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序 + 非递归（80 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSortNR</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> n<span class="token operator">-</span>len<span class="token punctuation">;</span> l <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span>len<span class="token number">-1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token operator">-</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 希尔排序（40 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">shellSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j<span class="token operator">-</span>gap <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-</span><span class="token operator">=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计数排序（32 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">countSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> maxv<span class="token operator">-</span>minv<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span>minv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 基数排序（不适用于负数）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">radixSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxv <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxv <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            maxd<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rank</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxd <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> count<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                rank<span class="token punctuation">[</span><span class="token operator">--</span>count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            maxd<span class="token operator">--</span><span class="token punctuation">;</span>            base <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 桶排序 (20 ms)</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bucketSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bs <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>maxv<span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">bucket</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bucket<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 堆排序（32 ms）</span>    <span class="token keyword">void</span> <span class="token function">adjust</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c1 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c2 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>c2<span class="token operator">&lt;</span>s <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> c2 <span class="token operator">:</span> c1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">heapSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
